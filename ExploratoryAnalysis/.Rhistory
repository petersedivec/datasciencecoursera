demo()
library(ggplot2)
install.package(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
search()
find_rtools()
library(devtools)
.lipPaths()
.libPaths()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
search()
search(KernSmooth)
search(2)
search()
?search
?ggplot2
??ggplot2
install.packages(devtools)
find.package("devtools")
install.packages("devtools")
library("devtools")
find_rtools()
library(shiny)
shiny::runApp('C:/Tools/RStudio/R/library/311_shiny')
setwd("~/PROJECTS/HELIOS/USMC RDC/ExcelExports")
list.files
list.files()
paste(list.files())
setwd("~/GitHub/datasciencecoursera/DataCleaning")
list.files()
data <-read.csv("getdata-data-ss06hid.csv")
summary(data)
str(data)
hist(data$VAL)
?hist
hist(data$VAL, 1:24)
?lapply
sapply(data$VAL, sum)
milplus<-subset(data,VAL>=14)
summary(milplus)
milplus<-subset(data,VAL>=24)
nrows(milplus)
ncol(milplus)
nrow(milplus)
summary(data$FES)
str(data$FES)
head(data$FES,20)
?read.xlsx
install.packages("xlsx")
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7\\')
Sys.setenv(JAVA_HOME='C:\\Tools\\Java\\jdk1.7.0_67\\jre\\')
library(xlsx)
?read.xlsx
d2<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", startRow=18, endRow=23, colIndex=7:15)
d2<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1, startRow=18, endRow=23, colIndex=7:15)
d2
sum(d2)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(d2$Zip*d2$Ext,na.rm=T)
link <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
install.packages("XML")
library(XML)
doc<-xmlTreeParse(link,useInternal=T)
doc<-xmlTreeParse(link)
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
xData <- getURL(fileURL)
install.packages("DT")
fread
install.packages("data.table")
?fread
library(data.table)
?fread
DT<-fread("getdata-data-ss06pid.csv")
summary(DT)
str(DT)
summary(DT$pwgtp15)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)
)
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]))
system.time(rowMeans(DT)[DT$SEX==1]))
system.time(rowMeans(DT)[DT$SEX==1])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)
)
sapply(split(DT$pwgtp15,DT$SEX),mean)
(tapply(DT$pwgtp15,DT$SEX,mean)
(tapply(DT$pwgtp15,DT$SEX,mean))
()
)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
library(httr)
?oauth_endpoints
?oauth_app
oauth_endpoints("github")
myapp <- oauth_app("github", "02ccb0eb13f29c794b08", secret="e9ddae113d5eab1c45c138feb12585204ed31a4a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
myapp <- oauth_app("github", "02ccb0eb13f29c794b08", secret="e9ddae113d5eab1c45c138feb12585204ed31a4a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
reqstop_for_status(req)
?GET
ans <- GET("https://api.github.com/users/jtleek/repos")
ans
ans[1]
ans[2]
ans[3]
ans[4]
ans[5]
ans[6]
ans[7]
ans[8]
ans[9]
ans <- GET("https://api.github.com/repos/jtleek/datasharing")
ans
ans[1]
ans[2]
ans[3]
ans[4]
data <- read.csv("getdata-data-ss06pid.csv")
str(data)
str(data$pwgtp1)
summary(data$pwgtp1)
summary(data$AGEO'')
summary(data$AGEOP)
summary(data$AGEP)
acs <- read.csv("getdata-data-ss06pid.csv")
install.packages("sqldf")
library(slqdf)
library(sqldf)
library("sqldf")
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
acspw <- sqldf("select pwgtp1 from acs where AGEP < 50")
acspw
str(acspw)
summary(data$AGEP)
str(data$AGEP)
unacs <- sqldf("select distinct AGEP from acs")
unacs
hist(unacs)
str(unacs)
order(unacs)
unacs[order(unacs)]
unacs[order(unacs),]
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = read.lines(con)
close(con)
htmlCode = readLines(con)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
str(htmlCode)
summary(htmlCode)
htmlCode
sapply(htmlCode, nchar)
nchar(htmlCode[1])
nchar(htmlCode[2])
nchar(htmlCode[3])
nchar(htmlCode[4])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?read.fwf
x <- read.fwf(
file="getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
str(x)
sum(x[4])
R.version.string
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
X
select(cran, X:size(X:size))
select(cran, -x:size)
select(cran, -X:size)
select(cran, -(X:size)
)
select(cran, -(5:20))
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
mydf
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?mean
?dplyr
submit()
pack_sum
quantile(pack_sum$count, probs=.99)
top_counts<-filter(pac_sum, count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
head(top_counts,20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs=.99)
top_unique = filter(pack_sum, unique>465)
top_unique = filter(pack_sum, unique > 465)
top_unique = filter(pack_sum, unique > 465)
info()
top_unique = filter(pack_sum, unique > 465)
top_unique = filter(pack_sum, unique > 464)
top_unique = filter(pack_sum, unique >= 465)
top_unique = filter(pack_sum, unique > 465)
skip()
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("~/GitHub/datasciencecoursera/ExploratoryAnalysis")
## Load the data and rename column name. Only 2007-02-01 and 2007-02-02 entries are loaded to optimize loading time.
data <- read.table("./household_power_consumption.txt", header = TRUE, skip = 66637, nrows = 2880, sep = ";", na.strings="?")
names(data) = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
## Converting time
data <- transform(data, Time = strptime(paste(Date, Time), "%d/%m/%Y %H:%M:%S"))
## Plot the graph and save as PNG
png("plot1.png")
hist(data$Global_active_power, main = "Global Active Power", col="RED", xlab="Global Active Power (kilowatts)")
dev.off()
## Plot the graph and save as PNG
png("plot2.png")
plot(data$Time, data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
library(lattice)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
summary(BodyWeight)
?text
?panel.abline
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?print.trellis
?splom
?par
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?qplot
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g+geom())
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g+geom="path")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<- gather(students2, sex_class, count)
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
?spread
getwd()
getwd()
submit()
submit()
submit()
skip()
extract_numeric("class5")
?mutate
submit()
students3
class(students)
colnames(students)
colnames(students3)
extract_numeric(students3)
extract_numeric("class5")
submit()
students4
submit()
?unique
unique(subset(students4, select=c(id, name, sex)))
submit()
submit()
passed
failed
passed<-mutate(passed,passed="passed")
passed<-mutate(passed,status="passed")
passed
class(passed)
passed<-select(passed,-passed)
passed
select(passed,-passed)
passed<-select(passed,-passed)
passed
df.rm(passed)
rm.df(passed)
pass<-select(passed,-passed)
pass
failed<-mutate(failed,status,"failed")
failed<-mutate(failed,status="failed")
rbind_list(pass,failed)
passed<-pass
passed
rbind_list(passed,failed)
sat
?gather
submit()
?group_by
?mutate
submit()
exit()
quit()
