install.packages("e1071")
trainAll <- train(training$diagnosis ~ ., method="glm", training)
testAll <- predict(trainAll, testing)
confusionMatrix(trainAll, testAll)
confusionMatrix(trainAll$diagnosis, predict(trainAll, testAll))
warnings()
library(MASS)
?shuttle
summary(MASS)
summary(shuttle)
str(shuttle)
auto_wind <- lm(use ~ wind, data=shuttle)
summary(auto_wind)
plot(shuttle)
table(shuttle$wind)
table(shuttle$wind, shuttle$use)
72/73
table(shuttle$wind, shuttle$use, shuttle$magn)
18/19
summary(mtcars)
fit <- lm(mpg ~ cyl + wt, data=mtcars)
summary(fit)
summary(fit)$coef
summary(fit)$coef[2,1]
summary(fit)$coef[2,1]*4
fit <- lm(mpg ~ cyl, data=mtcars)
fit2 <- lm(mpg ~ cyl, data=mtcars)
summary(fit2)
fit3 <- lm(mpg ~ cyl*wt, data=mtcars)
summary(fit3)
fit4 <- lm(mpg ~ I(wt* 0.5) + factor(cyl), data = mtcars)
summary(fit4)
?mtcars
fit4 <- lm(mpg ~ I(wt* 2) + factor(cyl), data = mtcars)
summary(fit4)
fit <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt -1, data=mtcars)
summary(fit)
summary(fit)$coef[1,1]-summary(fit)$coef[3,1]
fit2 <- lm(mpg ~ factor(cyl), data=mtcars)
summary(fit2)
fit2 <- lm(mpg ~ factor(cyl) -1, data=mtcars)
summary(fit2)
x <- c(0.586,0 .166, ‐0.042, ‐0.614, 11.72)
y <- c(0.549, ‐0.026, ‐0.127, ‐0.751, 1.344)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
summary(fit5)
?influence
influence(fit5)
influence.measures()
?influence.measures
influence.measures(fit5)
influence.measures(fit5)[5,2]
influence.measures(fit5)
t<-influence.measures(fit5)
t
t[5,2]
t$infmat
t$dfb.x
t$dfb.x[5]
t$dfb
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(concrete)
hist(concrete$Superplasticizer)
hist(log10(concrete$Superplasticizer))
hist(log10(concrete$Superplasticizer + 1))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL = training[,c(1, grep("^IL", names(predictors)))]
ptIL <- preProcess(training_IL[,-1], method="pca", thres = .8)
ptIL <- preProcess(training_IL[,-1], method="pca", thres = .9)
ptIL
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_IL = training[,c(1, grep("^IL", names(predictors)))]
ptIL <- preProcess(training_IL[,-1], method="pca", thres = .9)
ptIL
ptIL <- preProcess(training_IL[,-1], method="pca", thres = .8)
ptIL <- preProcess(training_IL[,-1], method="pca", thres = .8)
ptIL
trainAll <- train(diagnosis ~ ., method="glm", training)
trainAll <- train(diagnosis ~ ., method="glm", trainingIL)
trainAll <- train(diagnosis ~ ., method="glm", data=trainingIL)
trainAll <- train(diagnosis ~ ., method="glm", data=training_IL)
testing_IL = testing[,c(1, grep("^IL", names(predictors)))]
testAll <- predict(trainAll, testing_IL)
confusionMatrix(trainAll$diagnosis, predict(trainAll, testAll))
testAll
trainAll
ptIL
?train
trainptIL <- train(diagnosis ~ ., method="glm", preProcess="pca", data=training_IL)
trainingptIL
trainptIL
trainAll
library(MASS)
table(shuttle$wind, shuttle$use)
fit2 <- lm(mpg ~ factor(cyl) -1, data=mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, data=mtcars)
summary(fit3)
lrtest(fit2, fit3)
lmtest(fit2, fit3)
install.packages("lmtest")
?lrtest
lrtest(fit2, fit3)
lmtest::lrtest(fit2, fit3)
lrtest(fit2, fit3)
lmtest::lrtest(fit2, fit3)
fit <- lm(mpg ~ factor(cyl) + wt -1, data=mtcars)
lmtest::lrtest(fit, fit3)
fit3 <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
fit3a <- lm(mpg ~ factor(cyl)*wt, data=mtcars)
summary(fit3)
summary(fit3)
library("lmtest")
lmtest::lrtest(fit3, fit3a)
summary(fit3a)
summary(fit3)
lmtest::lrtest(fit3, fit3a)
data(mtcars)
?mtcars
summary(mtcars)
head(mtcars)
plot(mtcars)
str(mtcars)
?str
table(mtcars$gear)
table(mtcars$am)
plot(mtcars#am, mtcars$mpg)
q
plot(mtcars$am, mtcars$mpg)
?sapply
tapply(mtcars$mpg, mtcars$am, mean)
tapply(mtcars$mpg, mtcars$am, c(count, mean)
)
tapply(mtcars$mpg, mtcars$am, c(sum, mean)
)
f <- function(x) { c(sum(x), mean(x))}
tapply(mtcars$mpg, mtcars$am, f)
f <- function(x) { c(length(x), mean(x))}
tapply(mtcars$mpg, mtcars$am, f)
table(mtcars$am)
tapply(mtcars$mpg, mtcars$am, mean)
?mtcars
table(mtcars$am)
tapply(mtcars$wt, mtcars$am, mean)
table(mtcars$am)
tapply(mtcars[,c(1, 2, 3, 6)], mtcars$am, mean)
tapply(mtcars$disp, mtcars$am, mean)
tapply(mtcars$wt, mtcars$am, mean)
?lm
fit1 <- lm(mpg ~ factor(am), data=mtcars)
summary(fit1)
fit1 <- lm(mpg ~ factor(am) - 1, data=mtcars)
summary(fit1)
fit1 <- lm(mpg ~ factor(am) + wt + disp - 1, data=mtcars)
summary(fit1)
plot(fit1$residuals)
?glm
fit2 <- lm(mpg ~ . -1, data=mtcars)
summary(fit2)
fit2 <- lm(mpg ~ factor(am) + wt + disp + factor(gear) + factor(carb) -1, data=mtcars)
summary(fit2)
fit3 <- glm(mpg ~ factor(am) + wt + disp + factor(gear) + factor(carb) -1, family="binomial", data=mtcars)
summary(fit1)
?gear
?mtcars
mfrows(1,2)
par(1,2)
mfrow(1,2)
par(mfrow=c(1,2))
plot(fit1$residuals)
plot(fit2$residuals)
mean(fit1$residuals)
library(swirl)
rm(list=ls())
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fit, which=1)
plot(fitno, which=1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
ead(hatvalues(fit))
head(hatvalues(fit))
sigma<-sum(fit$residuals^2)/fit$df
df.residual(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1<-sqrt(deviance(fit)/fit$df.residual)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fitno)/(sigma*sqrt(1-hatvalues(fitno)))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <-predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
fit1 <- lm(mpg ~ factor(am) + wt + disp - 1, data=mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(am) + wt + disp + factor(gear) + factor(carb) -1, data=mtcars)
summary(fit2)
plot(fit1, which=1)
plot(fit1, which=2)
plot(fit1, which=3)
plot(fit1, which=4)
plot(fit1, which=5)
plot(fit1, which=4)
plot(fit1, which=3)
plot(fit2, which=3)
plot(fit2, which=4)
plot(fit1, which=4)
plot(fit2, which=4)
plot(fit1, which=2)
plot(fit2, which=2)
library(MASS)
table(shuttle$wind, shuttle$use)
72/145/(73/145)
auto_wind <- glm(use ~ wind, family="binomial", data=shuttle)
auto_wind
?shuttle
auto_wind <- glm(use ~ factor(wind) -1, family="binomial", data=shuttle)
auto_wind
auto_wind <- glm(use ~ factor(wind), family="binomial", data=shuttle)
auto_wind
.318/.251
1/[1]
1/ans
summary(auto_wind)
auto_wind <- glm(use ~ factor(wind) + factor(magn), family="binomial", data=shuttle)
auto_wind <- glm(use ~ factor(wind), family="binomial", data=shuttle)
auto_windmag <- glm(use ~ factor(wind) + factor(magn), family="binomial", data=shuttle)
summary(auto_windmag)
table(shuttle$use, shuttle$wind, shuttle$magn)
swirl()
rgp1()
rgp2()
head(swiss)
?swiss
mdl <- lm(Fertility ~ ., data=swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortaility, data = swiss)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data = swiss)
vif(mdl2)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, data=davenData)
mdl <- glm(ravenWinNum ~ ravenScore, data=ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, data=ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
odds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(.95,1)
?shuttle
head(shuttle)
lodds <- predict(auto_wind, c('head', 'tail'))
lodds <- predict(auto_wind, "head")
lodds <- predict(auto_wind, 0)
summary(auto_wind)
exp(-.251)/(1+exp(-.251))
exp(-.251)/(1+exp(-.0318))
exp(-.251/-.0318)/(1+exp(-.251/-.0318))
.251/.031
library(MASS)
table(shuttle$wind, shuttle$use)
auto_wind <- glm(use ~ factor(wind), family="binomial", data=shuttle)
lodds <- predict(auto_wind, c('head', 'tail'))
x <- (-5:5)
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87,4.97)
plot(y, x)
library(caret)
library(rpart)
setwd("~/GitHub/datasciencecoursera/PracticalML/Project")
pmltrain <- read.csv("pml-training.csv")
dim(pmltrain)
NAcount <- colSums(is.na(pmltrain))
hist(NAcount)
smtrain <- pmltrain[,!NAcount] # eliminate columns with mostly NAs
summary(smtrain$classe)
str(smtrain)
inTrain <- createDataPartition(y=smtrain$classe, p=.05, list=FALSE)
trainset <- smtrain[inTrain,]
testset <- smtest[-inTrain,]
dim(trainset)
M <- abs(cor(trainset[,-classe]))
str(trainset[92,])
str(trainset[,92])
str(trainset[,93])
M <- abs(cor(trainset[,-93]))
preProc <- preProcess(trainset[,-93], method="pca", thres = .9)
?dummyVars
test <- dummyVars(trainset$classe ~ ., data=trainset)
test <- dummyVars(trainset$classe ~ trainset[,-93], data=trainset)
?model.matrix
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
?segmentationOriginal
summary(segmentationOriginal)
str(segmentationOriginal)
dummies<-predict(dummyVars(Class ~ Case, data=segmentationOriginal), newdata=segmentationOriginal)
head(dummies)
trainset <- segmentationOriginal[as.logical(dummies[,2]),]
testset <- segmentationOriginal[as.logical(dummies[,1]),]
set.seed(125)
?rpart
mod <- train(Class ~ TotalIntenCh2 + FiberWidthCh1 + PerimStatusCh1, method="rpart", data=trainset)
plot(mod$finalModel, uniform=TRUE, main="Classification Tree")
library(rattle)
fancyRpartPlot(mod$finalModel)
caseA = c(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(mod, newdata=caseA)
mod$finalModel
fancyRpartPlot(mod$finalModel)
library(rattle)
fancyRpartPlot(mod$finalModel)
predict(mod, newdata=caseA)
install.packages("rpart.plot")
fancyRpartPlot(mod$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
summary(olive)
fit <- train(Area ~ ., method="rpart", data=olive)
fit$finalModel
predict(fit, newdata = newdata)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit, newdata = newdata)
head(olive, 25)
ttail\(olive, 25)
tail(olive, 25)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
?SAheart
?train
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family=binomial(), data = SAheart)
fit$finalModel
missClass(trainSA$chd, predict(fit, trainSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(trainSA$chd, predict(fit, testSA))
missClass(testSA$chd, predict(fit, testSA))
testSA$chd
predict(fit, testSA)
?predict
fit
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = SAheart)
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
str(testSA)
missClass(testSA$chd, predict(fit, testSA[,-10]))
missClass(trainSA$chd, predict(fit, trainSA[,-10]))
fit <- train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = SAheart)
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = SAheart)
missClass(trainSA$chd, predict(fit, trainSA))
missClass(testSA$chd, predict(fit, testSA))
formula <- factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl
fit4 <- train(formula, trainSA, method = "glm", family=binomial())
library(gdata)
install.packages("gdata")
testSAnochd <-remove.vars(testSA, names="chd", info=TRUE)
library(gdata)
library(gdata)
testSAnochd <-remove.vars(testSA, names="chd", info=TRUE)
trainSAnochd <-remove.vars(trainSA, names="chd", info=TRUE)
missClass( testSA$chd, predict(fit4, testSAnochd) )
missClass( trainSA$chd, predict(fit4, trainSAnochd) )
formula <- chd ~ age + alcohol + obesity + tobacco + typea + ldl
fit4 <- train(formula, trainSA, method = "glm", family=binomial())
set.seed(13234)
formula <- chd ~ age + alcohol + obesity + tobacco + typea + ldl
fit4 <- train(formula, trainSA, method = "glm", family=binomial())
missClass( testSA$chd, predict(fit4, testSAnochd) )
missClass( trainSA$chd, predict(fit4, trainSAnochd) )
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = SAheart)
missClass(testSA$chd, predict(fit, testSA))
missClass(trainSA$chd, predict(fit, trainSA))
fit
fit4
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family="binomial", data = trainSA)
missClass(testSA$chd, predict(fit, testSA))
missClass(trainSA$chd, predict(fit, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
fit <- train(y ~ ., method="rf", data=vowel.train)
fit
?varlmp
?varimp
?varImp
varImp(fit)
set.seed(33833)
fit <- train(y ~ ., method="rf", data=vowel.test)
varImp(fit)
?varimp
set.seed(33833)
fit <- train(factor(y) ~ ., method="rf", data=vowel.test)
varImp(fit)
set.seed(33833)
fit <- train(factor(y) ~ ., method="rf", data=vowel.train)
varImp(fit)
set.seed(33833)
rf_fit <- train(y ~ ., method="rf", data=vowel.train)
gbm_fit <- train(y ~ ., method="gbm", data=vowel.train)
rf_fit
confusionMatrix(vowel.test, predict(rf_fit, vowel.test))
confusionMatrix(vowel.test$y, predict(rf_fit, vowel.test))
confusionMatrix(vowel.test$y, predict(gbm_fit, vowel.test))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(diagnosis)
diagnosis
rf_fit <- train(diagnosis ~ predictors, method="rf")
rf_fit <- train(diagnosis ~ ., method="rf", data=predictors)
gbm_fit <- train(diagnosis ~ ., method="gbm", data=predictors)
rf_fit
set.seed(62433)
rf_fit <- train(diagnosis ~ ., method="rf", data=training)
gbm_fit <- train(diagnosis ~ ., method="gbm", data=training)
lda_fit <- train(diagnosis ~ ., method="lda", data=training)
lda_fit
confusionMatrix(diagnosis, predict(rf_fit, testing))
predict(rf_fit, testing)
str(training)
confusionMatrix(training$diagnosis, predict(rf_fit, testing))
training$diagnosis
confusionMatrix(testing$diagnosis, predict(rf_fit, testing))
confusionMatrix(testing$diagnosis, predict(gbm_fit, testing))
confusionMatrix(testing$diagnosis, predict(lda_fit, testing))
predDF <- data.frame(predict(rf_fit, training), predict(gbm_fit, training), predict(lda_fit, training), diagnosis=training$diagnosis)
combModFit <- train(diagnosis ~., method="gam", data=training)
confusionMatrix(testing$diagnosis, predict(combModFit, testing))
combModFit <- train(diagnosis ~ ., method="gam", data=training)
