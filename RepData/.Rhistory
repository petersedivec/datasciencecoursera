demo()
library(ggplot2)
install.package(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
search()
find_rtools()
library(devtools)
.lipPaths()
.libPaths()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
search()
search(KernSmooth)
search(2)
search()
?search
?ggplot2
??ggplot2
install.packages(devtools)
find.package("devtools")
install.packages("devtools")
library("devtools")
find_rtools()
library(shiny)
shiny::runApp('C:/Tools/RStudio/R/library/311_shiny')
quit()
installed_packages
quit()
installed_packages
installed_packages()
?rownames
quit()
install.packages("plyr")
exit()
quit()
require("R.utils")
library(R.utils)
require("plyr")
library(plyr)
setwd("~/GitHub/datasciencecoursera/RepData")
bzFile <- "./data/StormData.csv.bz2"
sdFile <- gsub(".bz2","",bzFile)
# If we don't have data, create directory, download and unzip it
if (!file.exists("data")) {
dir.create("data")
fileURL<- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileURL, destfile = bzFile)
bunzip2(bzFile, sdFile, remove = FALSE)  # Extract file from bz2
}
# read the data in and view overall statistics about it
sd <- read.csv(sdFile)
# str(sd) # loop at the data structure
# summary(sd) # look at a sumamry of the statistics
exp <- function (f) if (f == 'K') 1000 else if (e == 'M') 1000000 else if (e == 'B') 1000000000 else 1
exp("B")
exp <- function (f) if (f == 'K') 1000 else if (f == 'M') 1000000 else if (f == 'B') 1000000000 else 1
exp("B")
exp("M")
1e3
1e6
exp <- function (f) if (f == 'K') 1e3 else if (f == 'M') 1e6 else if (f == 'B') 1e9 else 1
test<-subset(sd,PROPDMGEXP=="B")
# convert all the EventType names to uppercase and strip off plural "s"
sdCleaned <- mutate(sd, EVTYPE = sub("S$","",toupper(EVTYPE)), PROPDMGEXP = toupper(PROPDMGEXP), CROPDMGEXP = toupper(CROPDMGEXP))
# summarize by EventType and count total Fatalities & Injuries
harmful <- ddply(sdCleaned, .(EVTYPE), summarize, count = length(EVTYPE), totFat = sum(FATALITIES),
totInj = sum(INJURIES), totHarm = totFat+totInj, .drop=FALSE)
#costly <- ddply(sdCleaned, .(EVTYPE), summarize)
t2<-ddply(test,pd = PROPDMG*exp(PROPDMGEXP))
t2<-mutate(test,pd = PROPDMG*exp(PROPDMGEXP))
subset(t2,select=c("pd","PROPDMG","PROPDMGEXP"))
costly <- ddply(sdCleaned, .(EVTYPE), summarize, totProDmg = sum(PROPDMG*exp(PROPDMGEXP))
)
sd2 <- mutate(sdCleaned, propDmg = PROPDMG*exp(PROPDMGEXP))
head(subset(sd2[,c("EVTYPE","PROPDMG","propDmg")]),50)
head(subset(sd[,c("EVTYPE","PROPDMG")]),50)
# create an exponent function to calculate the magnitude of the reported crop/property damage (thousands, millions, billions)
exp <- function (f) if (f == 'K') 1e3 else if (f == 'M') 1e6 else if (f == 'B') 1e9 else 1
# convert all the EventType names to uppercase and strip off plural "s", clean-up PROPDMGEXP and COPDMGEXP so they're all upper-case factors and convert values to $ by creating propDmg and cropDmg functions
sdCleaned <- mutate(sd, EVTYPE = sub("S$","",toupper(EVTYPE)), PROPDMGEXP = toupper(PROPDMGEXP), CROPDMGEXP = toupper(CROPDMGEXP), propDmg = PROPDMG*exp(PROPDMGEXP), cropDmg = CROPDMG*exp(CROPDMGEXP))
# summarize by EventType and count total Fatalities & Injuries
harmful <- ddply(sdCleaned, .(EVTYPE), summarize, count = length(EVTYPE), totFat = sum(FATALITIES),
totInj = sum(INJURIES), totHarm = totFat+totInj, .drop=FALSE)
# summarize by EventType and count total property and crop damage
costly <- ddply(sdCleaned, .(EVTYPE), summarize, count = length(EVTYPE),
totPropDmg = sum(propDmg), totCropDmg = sum(cropDmg))
# subset and look for the most harmful by total injuries/fatalities
MostHarmful <-subset(harmful, totFat>50 | totInj>50)
# adding a harmful Factor which weights fatalities to be 10x injuries and also
# calculates a perEvent harmful Index
MostHarmful <-mutate(MostHarmful, harmFac = 10*totFat+totInj, perEvent = round(harmFac/count,1))
# look at top 15 by Harmful Factor
TopHarmful <- head(MostHarmful[order(-MostHarmful$harmFac),],15)
# look at top 15 as viewed by per Event Harmful Factor
TopPerEvent <- head(MostHarmful[order(-MostHarmful$perEvent),],15)
# add a totDmg variable that represents the combined property and crop damage
costly <- mutate(costly, totDmg = totProp+totCrop)
costly <- mutate(costly, totDmg = totPropDmg+totCropDmg)
TopCostly <- head(costly[order(-costly$totDmg),],25)
TopCostly
costly <- mutate(costly, totDmg = totPropDmg+totCropDmg, perEvent = totDmg/count)
TopCostPerEvent <- head(costly[order(-costly$perEvent),],25)
TopCostPerEvent
?grep
grep("TORNADO",unique(sd$EVTYPE))
sd[grep("TORNADO",unique(sd$EVTYPE)),"EVTYPE"]
sd[grep("TORNADO",unique(sd$EVTYPE)),c(1:8)]
eTypes<-unique(sd$EVTYPE)
eTypes[grep("TORNADO", eTypes)]
eTypes[grep("HURICANE", eTypes)]
eTypes[grep("HURICANNE", eTypes)]
eTypes[grep("HURRICANE", eTypes)]
table(TopCostly$count)
table(TopCostPerEvent$count)
eTypes[grep("HURRICANE", eTypes)]
eTypes[grep("TORNADO", eTypes)]
ETypes
eTypes
eTypes[order(eTypes)]
tail(eTypes[order(eTypes)],20)
eTypes[grep("WINTER", eTypes),]
eTypes[grep("WINTER", eTypes)]
par(mfrow=c(2,1), las=2) , mai=c(2.5,1,1,0.25)+0.1)
barplot(t(data.matrix(subset(TopHarmful, select=c(3,4))))/1000, names.arg = TopHarmful$EVTYPE, legend.text=c("Fatalities","Injuries"),main="Total Harm by Event (thousands)", ylab="# injuries/fatalities (in thousands)")
barplot(t(data.matrix(subset(TopPerEvent, select=c(7)))), names.arg = TopPerEvent$EVTYPE, main="Ave Harm Per Event", ylab="Ave Harm Factor per Event")
par(mfrow=c(2,1), las=2) #, mai=c(2.5,1,1,0.25)+0.1)
barplot(t(data.matrix(subset(TopHarmful, select=c(3,4))))/1000, names.arg = TopHarmful$EVTYPE, legend.text=c("Fatalities","Injuries"),main="Total Harm by Event (thousands)", ylab="# injuries/fatalities (in thousands)")
barplot(t(data.matrix(subset(TopPerEvent, select=c(7)))), names.arg = TopPerEvent$EVTYPE, main="Ave Harm Per Event", ylab="Ave Harm Factor per Event")
```
quit()
